/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Router,
  RouterInterface,
} from "../../../contracts/Router.sol/Router";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InsufficientOutput",
    type: "error",
  },
  {
    inputs: [],
    name: "PairNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "contract Factory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reserveOut",
        type: "uint256",
      },
    ],
    name: "getAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
    ],
    name: "getAmountsOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "getPair",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "swapExactTokensForTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610d57380380610d5783398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610cc66100916000396000818160a7015261068c0152610cc66000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063054d50d41461005c578063472b43f314610082578063c45a0155146100a2578063d06ca61f146100e1578063e6a43905146100f4575b600080fd5b61006f61006a3660046108cc565b610107565b6040519081526020015b60405180910390f35b610095610090366004610920565b6101f5565b60405161007991906109be565b6100c97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610079565b6100956100ef366004610a18565b6103e2565b6100c9610102366004610ae9565b610662565b60008084116101525760405162461bcd60e51b8152602060048201526012602482015271125394d551919250d251539517d25394155560721b60448201526064015b60405180910390fd5b6000831180156101625750600082115b6101a75760405162461bcd60e51b8152602060048201526016602482015275494e53554646494349454e545f4c495155494449545960501b6044820152606401610149565b60006101b5856103e5610b38565b905060006101c38483610b38565b90506000826101d4876103e8610b38565b6101de9190610b4f565b90506101ea8183610b62565b979650505050505050565b6060610234868585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506103e292505050565b90508481600183516102469190610b84565b8151811061025657610256610b97565b602002602001015110156102975760405162461bcd60e51b8152602060048201526008602482015267534c49505041474560c01b6044820152606401610149565b838360008181106102aa576102aa610b97565b90506020020160208101906102bf9190610bad565b6001600160a01b03166323b872dd33610321878760008181106102e4576102e4610b97565b90506020020160208101906102f99190610bad565b8888600181811061030c5761030c610b97565b90506020020160208101906101029190610bad565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018990526064016020604051808303816000875af1158015610375573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103999190610bd1565b506103d981858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250879250610702915050565b95945050505050565b60606002825110156104235760405162461bcd60e51b815260206004820152600a6024820152691410551217d4d213d49560b21b6044820152606401610149565b815167ffffffffffffffff81111561043d5761043d610a02565b604051908082528060200260200182016040528015610466578160200160208202803683370190505b509050828160008151811061047d5761047d610b97565b60200260200101818152505060005b6001835161049a9190610b84565b81101561065b5760006104eb8483815181106104b8576104b8610b97565b6020026020010151858460016104ce9190610b4f565b815181106104de576104de610b97565b6020026020010151610662565b90506001600160a01b0381166105145760405163d719ab6960e01b815260040160405180910390fd5b600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105799190610c0a565b5090925090506000808761058e876001610b4f565b8151811061059e5761059e610b97565b60200260200101516001600160a01b03168887815181106105c1576105c1610b97565b60200260200101516001600160a01b0316106105de5782846105e1565b83835b6001600160701b031691506001600160701b0316915061061b87878151811061060c5761060c610b97565b60200260200101518383610107565b87610627886001610b4f565b8151811061063757610637610b97565b6020026020010181815250505050505050808061065390610c5a565b91505061048c565b5092915050565b60405163e6a4390560e01b81526001600160a01b03838116600483015282811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa1580156106d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f99190610c73565b90505b92915050565b60005b600183516107139190610b84565b8110156108c65760008084838151811061072f5761072f610b97565b6020026020010151858460016107459190610b4f565b8151811061075557610755610b97565b602002602001015191509150600061076d8383610662565b90506001600160a01b0381166107965760405163d719ab6960e01b815260040160405180910390fd5b6000826001600160a01b0316846001600160a01b0316106107b85782846107bb565b83835b5090506000886107cc876001610b4f565b815181106107dc576107dc610b97565b60200260200101519050600080836001600160a01b0316876001600160a01b03161461080a5782600061080e565b6000835b91509150600060028b516108229190610b84565b891061082e578961083e565b61083e878c6104ce8c6002610b4f565b6040516336cd320560e11b815260048101859052602481018490526001600160a01b03808316604483015291925090871690636d9a640a90606401600060405180830381600087803b15801561089357600080fd5b505af11580156108a7573d6000803e3d6000fd5b50505050505050505050505080806108be90610c5a565b915050610705565b50505050565b6000806000606084860312156108e157600080fd5b505081359360208301359350604090920135919050565b6001600160a01b038116811461090d57600080fd5b50565b803561091b816108f8565b919050565b60008060008060006080868803121561093857600080fd5b8535945060208601359350604086013567ffffffffffffffff8082111561095e57600080fd5b818801915088601f83011261097257600080fd5b81358181111561098157600080fd5b8960208260051b850101111561099657600080fd5b60208301955080945050505060608601356109b0816108f8565b809150509295509295909350565b6020808252825182820181905260009190848201906040850190845b818110156109f6578351835292840192918401916001016109da565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610a2b57600080fd5b8235915060208084013567ffffffffffffffff80821115610a4b57600080fd5b818601915086601f830112610a5f57600080fd5b813581811115610a7157610a71610a02565b8060051b604051601f19603f83011681018181108582111715610a9657610a96610a02565b604052918252848201925083810185019189831115610ab457600080fd5b938501935b82851015610ad957610aca85610910565b84529385019392850192610ab9565b8096505050505050509250929050565b60008060408385031215610afc57600080fd5b8235610b07816108f8565b91506020830135610b17816108f8565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176106fc576106fc610b22565b808201808211156106fc576106fc610b22565b600082610b7f57634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156106fc576106fc610b22565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610bbf57600080fd5b8135610bca816108f8565b9392505050565b600060208284031215610be357600080fd5b81518015158114610bca57600080fd5b80516001600160701b038116811461091b57600080fd5b600080600060608486031215610c1f57600080fd5b610c2884610bf3565b9250610c3660208501610bf3565b9150604084015163ffffffff81168114610c4f57600080fd5b809150509250925092565b600060018201610c6c57610c6c610b22565b5060010190565b600060208284031215610c8557600080fd5b8151610bca816108f856fea26469706673582212202c49abc9c438af3f08558057dbb71a2f90e5d8046d44388c1cb9660ed298ca3664736f6c63430008150033";

type RouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Router__factory extends ContractFactory {
  constructor(...args: RouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _factory: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_factory, overrides || {});
  }
  override deploy(
    _factory: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_factory, overrides || {}) as Promise<
      Router & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Router__factory {
    return super.connect(runner) as Router__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RouterInterface {
    return new Interface(_abi) as RouterInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Router {
    return new Contract(address, _abi, runner) as unknown as Router;
  }
}
